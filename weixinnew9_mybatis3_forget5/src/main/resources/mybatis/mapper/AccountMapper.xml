<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.markus.wx.mapper.AccountMapper">
  <resultMap id="BaseResultMap" type="com.markus.wx.account.entity.Account">
    <id column="account_id" jdbcType="INTEGER" property="accountId" />
    <result column="account_name" jdbcType="VARCHAR" property="accountName" />
    <result column="phone_number" jdbcType="VARCHAR" property="phoneNumber" />
    <result column="login_password" jdbcType="VARCHAR" property="loginPassword" />
    <result column="validate_code" jdbcType="VARCHAR" property="validateCode" />
    <result column="register_time" jdbcType="TIMESTAMP" property="registerTime" />
    <result column="validate_counter" jdbcType="VARCHAR" property="validateCounter" />
    <result column="msgtype" jdbcType="VARCHAR" property="msgtype" />
    <result column="event" jdbcType="VARCHAR" property="event" />
    <result column="event_key" jdbcType="VARCHAR" property="eventKey" />
    <result column="tousername" jdbcType="VARCHAR" property="tousername" />
    <result column="fromusername" jdbcType="VARCHAR" property="fromusername" />
  </resultMap>
  
  
  
    
  <select id="findByNameOrPhoneAndPassword" resultMap="findByNameOrPhoneAndPasswordResultMapper">
  	SELECT
		acc.account_id,
	    acc.account_name,
	    acc.phone_number,
	    acc.login_password,
	    acc.validate_code,
	    acc.validate_counter,
	    acc.register_time,
	    acc.msgtype,
	    acc.event,
	    acc.event_key,
	    acc.tousername,
	    acc.fromusername
	from account as acc
    where acc.account_name=#{loginNameOrPhone} or acc.phone_number=#{loginNameOrPhone} and acc.login_password= #{password}
  </select>
  
    <resultMap type="com.markus.wx.account.entity.Account" id="findByNameOrPhoneAndPasswordResultMapper">
	    <id column="account_id" jdbcType="INTEGER" property="accountId" />
	    <result column="account_name" jdbcType="VARCHAR" property="accountName" />
	    <result column="phone_number" jdbcType="VARCHAR" property="phoneNumber" />
	    <result column="login_password" jdbcType="VARCHAR" property="loginPassword" />
	    <result column="validate_code" jdbcType="VARCHAR" property="validateCode" />
	    <result column="register_time" jdbcType="TIMESTAMP" property="registerTime" />
	    <result column="validate_counter" jdbcType="VARCHAR" property="validateCounter" />
	    <result column="msgtype" jdbcType="VARCHAR" property="msgtype" />
	    <result column="event" jdbcType="VARCHAR" property="event" />
	    <result column="event_key" jdbcType="VARCHAR" property="eventKey" />
	    <result column="tousername" jdbcType="VARCHAR" property="tousername" />
	    <result column="fromusername" jdbcType="VARCHAR" property="fromusername" />
  </resultMap>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    account_id, account_name, phone_number, login_password, validate_code, register_time, 
    validate_counter, msgtype, event, event_key, tousername, fromusername
  </sql>
  <select id="selectByExample" parameterType="com.markus.wx.mapper.AccountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account
    where account_id = #{accountId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account
    where account_id = #{accountId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.markus.wx.mapper.AccountExample">
    delete from account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.markus.wx.account.entity.Account">
    insert into account (account_id, account_name, phone_number, 
      login_password, validate_code, register_time, 
      validate_counter, msgtype, event, 
      event_key, tousername, fromusername
      )
    values (#{accountId,jdbcType=INTEGER}, #{accountName,jdbcType=VARCHAR}, #{phoneNumber,jdbcType=VARCHAR}, 
      #{loginPassword,jdbcType=VARCHAR}, #{validateCode,jdbcType=VARCHAR}, #{registerTime,jdbcType=TIMESTAMP}, 
      #{validateCounter,jdbcType=VARCHAR}, #{msgtype,jdbcType=VARCHAR}, #{event,jdbcType=VARCHAR}, 
      #{eventKey,jdbcType=VARCHAR}, #{tousername,jdbcType=VARCHAR}, #{fromusername,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.markus.wx.account.entity.Account">
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="accountId != null">
        account_id,
      </if>
      <if test="accountName != null">
        account_name,
      </if>
      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="loginPassword != null">
        login_password,
      </if>
      <if test="validateCode != null">
        validate_code,
      </if>
      <if test="registerTime != null">
        register_time,
      </if>
      <if test="validateCounter != null">
        validate_counter,
      </if>
      <if test="msgtype != null">
        msgtype,
      </if>
      <if test="event != null">
        event,
      </if>
      <if test="eventKey != null">
        event_key,
      </if>
      <if test="tousername != null">
        tousername,
      </if>
      <if test="fromusername != null">
        fromusername,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="accountId != null">
        #{accountId,jdbcType=INTEGER},
      </if>
      <if test="accountName != null">
        #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="validateCode != null">
        #{validateCode,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null">
        #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="validateCounter != null">
        #{validateCounter,jdbcType=VARCHAR},
      </if>
      <if test="msgtype != null">
        #{msgtype,jdbcType=VARCHAR},
      </if>
      <if test="event != null">
        #{event,jdbcType=VARCHAR},
      </if>
      <if test="eventKey != null">
        #{eventKey,jdbcType=VARCHAR},
      </if>
      <if test="tousername != null">
        #{tousername,jdbcType=VARCHAR},
      </if>
      <if test="fromusername != null">
        #{fromusername,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.markus.wx.mapper.AccountExample" resultType="java.lang.Long">
    select count(*) from account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update account
    <set>
      <if test="record.accountId != null">
        account_id = #{record.accountId,jdbcType=INTEGER},
      </if>
      <if test="record.accountName != null">
        account_name = #{record.accountName,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneNumber != null">
        phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.loginPassword != null">
        login_password = #{record.loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.validateCode != null">
        validate_code = #{record.validateCode,jdbcType=VARCHAR},
      </if>
      <if test="record.registerTime != null">
        register_time = #{record.registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.validateCounter != null">
        validate_counter = #{record.validateCounter,jdbcType=VARCHAR},
      </if>
      <if test="record.msgtype != null">
        msgtype = #{record.msgtype,jdbcType=VARCHAR},
      </if>
      <if test="record.event != null">
        event = #{record.event,jdbcType=VARCHAR},
      </if>
      <if test="record.eventKey != null">
        event_key = #{record.eventKey,jdbcType=VARCHAR},
      </if>
      <if test="record.tousername != null">
        tousername = #{record.tousername,jdbcType=VARCHAR},
      </if>
      <if test="record.fromusername != null">
        fromusername = #{record.fromusername,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update account
    set account_id = #{record.accountId,jdbcType=INTEGER},
      account_name = #{record.accountName,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      login_password = #{record.loginPassword,jdbcType=VARCHAR},
      validate_code = #{record.validateCode,jdbcType=VARCHAR},
      register_time = #{record.registerTime,jdbcType=TIMESTAMP},
      validate_counter = #{record.validateCounter,jdbcType=VARCHAR},
      msgtype = #{record.msgtype,jdbcType=VARCHAR},
      event = #{record.event,jdbcType=VARCHAR},
      event_key = #{record.eventKey,jdbcType=VARCHAR},
      tousername = #{record.tousername,jdbcType=VARCHAR},
      fromusername = #{record.fromusername,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.markus.wx.account.entity.Account">
    update account
    <set>
      <if test="accountName != null">
        account_name = #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        phone_number = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        login_password = #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="validateCode != null">
        validate_code = #{validateCode,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null">
        register_time = #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="validateCounter != null">
        validate_counter = #{validateCounter,jdbcType=VARCHAR},
      </if>
      <if test="msgtype != null">
        msgtype = #{msgtype,jdbcType=VARCHAR},
      </if>
      <if test="event != null">
        event = #{event,jdbcType=VARCHAR},
      </if>
      <if test="eventKey != null">
        event_key = #{eventKey,jdbcType=VARCHAR},
      </if>
      <if test="tousername != null">
        tousername = #{tousername,jdbcType=VARCHAR},
      </if>
      <if test="fromusername != null">
        fromusername = #{fromusername,jdbcType=VARCHAR},
      </if>
    </set>
    where account_id = #{accountId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.markus.wx.account.entity.Account">
    update account
    set account_name = #{accountName,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      login_password = #{loginPassword,jdbcType=VARCHAR},
      validate_code = #{validateCode,jdbcType=VARCHAR},
      register_time = #{registerTime,jdbcType=TIMESTAMP},
      validate_counter = #{validateCounter,jdbcType=VARCHAR},
      msgtype = #{msgtype,jdbcType=VARCHAR},
      event = #{event,jdbcType=VARCHAR},
      event_key = #{eventKey,jdbcType=VARCHAR},
      tousername = #{tousername,jdbcType=VARCHAR},
      fromusername = #{fromusername,jdbcType=VARCHAR}
    where account_id = #{accountId,jdbcType=INTEGER}
  </update>
</mapper>